typedef unsigned char Byte;

// 4-byte vector (for columns of the matrices)
struct Vec4 {
  union {
    array<Byte, 4> bytesRep;
    unsigned int uintRep;
  };

  Vec4()
    : uintRep(0)
  {
  }

  Byte& operator[](int i) {
    return bytesRep[i];
  }
  const Byte& operator[](int i) const {
    return bytesRep[i];
  }
};

// 128-bit block in column-major matrix form
struct Block {
  array<Vec4, 4> cols;

  Vec4& operator[](int i) {
    return cols[i];
  }
  const Vec4& operator[](int i) const {
    return cols[i];
  }

  void read(const Byte *in) {
    for (int c = 0; c < 4; ++c) {
      for (int r = 0; r < 4; ++r) {
        (*this)[c][r] = *in;
        ++in;
      }
    }
  }
  void write(Byte *out) {
    for (int c = 0; c < 4; ++c) {
      for (int r = 0; r < 4; ++r) {
        *out = (*this)[c][r];
        ++out;
      }
    }
  }

  // TODO check if there is a better (non-pointer) way to pass the roundKey
  void addRoundKey(const Vec4 *roundKey) {
    for (int c = 0; c < 4; ++c) {
      for (int r = 0; r < 4; ++r) {
        (*this)[c][r] ^= roundKey[c][r];
      }
    }
  }
};
