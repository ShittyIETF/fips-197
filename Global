typedef unsigned char   Byte;
typedef vector<Byte>    Bytes;
typedef unsigned int    Word;

// 4-byte vector (for columns of the matrices)
struct Vec4 : public array<Byte, 4> {
  typedef array<Byte, 4> base_type;

  Vec4() : array<Byte, 4>{{0, 0, 0, 0}}
  {
  }
};

// 128-bit block for input/output
struct IOBlock : public array<Byte, 16> {};

// 128-bit block in column-major matrix form
struct Block : public array<Vec4, 4> {
  typedef array<Vec4, 4> base_type;

  Block() {}

  Block& operator<<(const IOBlock &in) {
    for (int r = 0; r < 4; ++r) {
      for (int c = 0; c < 4; ++c) {
        (*this)(r,c) = in[r + 4*c];
      }
    }
    return *this;
  }
  Block& operator>>(IOBlock &in) {
    for (int r = 0; r < 4; ++r) {
      for (int c = 0; c < 4; ++c) {
        in[r + 4*c] = (*this)(r,c);
      }
    }
    return *this;
  }

  // Element accessor style: m(r, c)
  // Indices start from zero
  Byte& operator()(int row, int col) {
    return (*this)[col][row];
  }
};

struct State : public Block {};
