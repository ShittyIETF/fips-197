#pragma once
// Section 4. Mathematical Preliminaries
// Finite field arithmetic over 2^8

namespace gf_2_8 {
  // 4.1 Addition
  // Addition is defined as xor operation
  Byte add(Byte a, Byte b) {
    return a^b;
  }

  // 4.2 Multiplication
  // Defined as polynomial multiplication modulo m(x) = x^8 + x^4 + x^3 + x + 1
  Byte mul(Byte a, Byte b) {
    const unsigned short m = 0b100011011;
    unsigned short a2 = a;
    unsigned short res = 0;

    for (int n = 0; n < 8; ++n) {
      if (b & 1) {
        res ^= a2;
      }
      b >>= 1;
      a2 <<= 1;
    }

    // Mod
    for (int n = 15, s = 7; n >= 8; --n, --s) {
      if (res & (1u << n)) {
        res ^= (m << s);
      }
    }

    return (Byte)res;
  }

  struct Polynomial {
    array<Byte, 4> bytesRep;

    Polynomial()
      : bytesRep{{0, 0, 0, 0}}
    {
    }

    Polynomial(Byte a, Byte b, Byte c, Byte d)
      : bytesRep{{a, b, c, d}}
    {
    }

    Byte& operator[](int i) {
      return bytesRep[i];
    }
    const Byte& operator[](int i) const {
      return bytesRep[i];
    }

    array<Byte, 4>& bytes() {
      return bytesRep;
    }
  };

  Polynomial add(Polynomial a, Polynomial b) {
    Polynomial c;
    for (int i = 0; i < 4; ++i) {
      c[i] = a[i] ^ b[i];
    }
    return c;
  }

  Polynomial mul(Polynomial a, Polynomial b) {
    Polynomial res;

    for (int i = 0; i < 4; ++i) {
      for (int j = 0; j < 4; ++j) {
        int ri = (i+j) % 4;
        res[ri] = add(res[ri], mul(a[i], b[j]));
      }
    }

    return res;
  }
}
